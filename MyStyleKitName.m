//
//  MyStyleKitName.m
//  InkedMargin
//
//  Created by Alok Pandey on 26/02/16.
//  Copyright (c) 2016 Alok . All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "MyStyleKitName.h"


@implementation MyStyleKitName

#pragma mark Cache

static NSColor* _yelloColorActive = nil;

static NSImage* _imageOfDropView = nil;
static NSImage* _imageOfAuthorIcon = nil;
static NSImage* _imageOfStarSideBarIcon = nil;
static NSImage* _imageOfTrashSideBarIcon = nil;
static NSImage* _imageOfRecentelyAddedIcon = nil;

#pragma mark Initialization

+ (void)initialize
{
    // Colors Initialization
    _yelloColorActive = [NSColor colorWithCalibratedRed: 0.749 green: 0.749 blue: 0.749 alpha: 1];

}

#pragma mark Colors

+ (NSColor*)yelloColorActive { return _yelloColorActive; }

#pragma mark Drawing Methods

+ (void)drawDropView
{
}

+ (void)drawDropViewOnKindleConnectedWithFrame: (NSRect)frame
{
    //// General Declarations
    CGContextRef context = (CGContextRef)NSGraphicsContext.currentContext.graphicsPort;

    //// Color Declarations
    NSColor* color17 = [NSColor colorWithCalibratedRed: 0.537 green: 0.565 blue: 0.592 alpha: 1];
    NSColor* color20 = [NSColor colorWithCalibratedRed: 0.949 green: 0.949 blue: 0.949 alpha: 1];
    NSColor* color21 = [NSColor colorWithCalibratedRed: 0.2 green: 0.267 blue: 0.322 alpha: 1];

    //// Group
    {
        [NSGraphicsContext saveGraphicsState];
        CGContextTranslateCTM(context, NSMinX(frame) + 218, NSMaxY(frame) - 117);



        //// Rectangle Drawing
        NSBezierPath* rectanglePath = [NSBezierPath bezierPathWithRect: NSMakeRect(-218, -195, 460, 312)];
        [color20 setFill];
        [rectanglePath fill];


        //// LabelDrag Drawing
        NSRect labelDragRect = NSMakeRect(-148, -148, 321, 31);
        {
            NSString* textContent = @" Now copying highlights..\n";
            NSMutableParagraphStyle* labelDragStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
            labelDragStyle.alignment = NSCenterTextAlignment;

            NSDictionary* labelDragFontAttributes = @{NSFontAttributeName: [NSFont boldSystemFontOfSize: 14], NSForegroundColorAttributeName: color21, NSParagraphStyleAttributeName: labelDragStyle};

            CGFloat labelDragTextHeight = NSHeight([textContent boundingRectWithSize: labelDragRect.size options: NSStringDrawingUsesLineFragmentOrigin attributes: labelDragFontAttributes]);
            NSRect labelDragTextRect = NSMakeRect(NSMinX(labelDragRect), NSMinY(labelDragRect) + (NSHeight(labelDragRect) - labelDragTextHeight) / 2, NSWidth(labelDragRect), labelDragTextHeight);
            [NSGraphicsContext saveGraphicsState];
            NSRectClip(labelDragRect);
            [textContent drawInRect: NSOffsetRect(labelDragTextRect, 0, 1) withAttributes: labelDragFontAttributes];
            [NSGraphicsContext restoreGraphicsState];
        }


        //// B Drawing
        [NSGraphicsContext saveGraphicsState];
        CGContextTranslateCTM(context, -31, -82);
        CGContextRotateCTM(context, 90 * M_PI / 180);

        NSRect bRect = NSMakeRect(0, 0, 16, 22);
        {
            NSString* textContent = @"B";
            NSMutableParagraphStyle* bStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
            bStyle.alignment = NSLeftTextAlignment;

            NSDictionary* bFontAttributes = @{NSFontAttributeName: [NSFont systemFontOfSize: 18], NSForegroundColorAttributeName: color17, NSParagraphStyleAttributeName: bStyle};

            CGFloat bTextHeight = NSHeight([textContent boundingRectWithSize: bRect.size options: NSStringDrawingUsesLineFragmentOrigin attributes: bFontAttributes]);
            NSRect bTextRect = NSMakeRect(NSMinX(bRect), NSMinY(bRect) + (NSHeight(bRect) - bTextHeight) / 2, NSWidth(bRect), bTextHeight);
            [NSGraphicsContext saveGraphicsState];
            NSRectClip(bRect);
            [textContent drawInRect: NSOffsetRect(bTextRect, 0, 1) withAttributes: bFontAttributes];
            [NSGraphicsContext restoreGraphicsState];
        }

        [NSGraphicsContext restoreGraphicsState];


        //// B 2 Drawing
        [NSGraphicsContext saveGraphicsState];
        CGContextTranslateCTM(context, -31, -62);
        CGContextRotateCTM(context, 90 * M_PI / 180);

        NSRect b2Rect = NSMakeRect(0, 0, 16, 22);
        {
            NSString* textContent = @"B";
            NSMutableParagraphStyle* b2Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
            b2Style.alignment = NSLeftTextAlignment;

            NSDictionary* b2FontAttributes = @{NSFontAttributeName: [NSFont systemFontOfSize: 18], NSForegroundColorAttributeName: color17, NSParagraphStyleAttributeName: b2Style};

            CGFloat b2TextHeight = NSHeight([textContent boundingRectWithSize: b2Rect.size options: NSStringDrawingUsesLineFragmentOrigin attributes: b2FontAttributes]);
            NSRect b2TextRect = NSMakeRect(NSMinX(b2Rect), NSMinY(b2Rect) + (NSHeight(b2Rect) - b2TextHeight) / 2, NSWidth(b2Rect), b2TextHeight);
            [NSGraphicsContext saveGraphicsState];
            NSRectClip(b2Rect);
            [textContent drawInRect: NSOffsetRect(b2TextRect, 0, 1) withAttributes: b2FontAttributes];
            [NSGraphicsContext restoreGraphicsState];
        }

        [NSGraphicsContext restoreGraphicsState];


        //// B 3 Drawing
        [NSGraphicsContext saveGraphicsState];
        CGContextTranslateCTM(context, -31, -42);
        CGContextRotateCTM(context, 90 * M_PI / 180);

        NSRect b3Rect = NSMakeRect(0, 0, 16, 22);
        {
            NSString* textContent = @"B";
            NSMutableParagraphStyle* b3Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
            b3Style.alignment = NSLeftTextAlignment;

            NSDictionary* b3FontAttributes = @{NSFontAttributeName: [NSFont systemFontOfSize: 18], NSForegroundColorAttributeName: color17, NSParagraphStyleAttributeName: b3Style};

            CGFloat b3TextHeight = NSHeight([textContent boundingRectWithSize: b3Rect.size options: NSStringDrawingUsesLineFragmentOrigin attributes: b3FontAttributes]);
            NSRect b3TextRect = NSMakeRect(NSMinX(b3Rect), NSMinY(b3Rect) + (NSHeight(b3Rect) - b3TextHeight) / 2, NSWidth(b3Rect), b3TextHeight);
            [NSGraphicsContext saveGraphicsState];
            NSRectClip(b3Rect);
            [textContent drawInRect: NSOffsetRect(b3TextRect, 0, 1) withAttributes: b3FontAttributes];
            [NSGraphicsContext restoreGraphicsState];
        }

        [NSGraphicsContext restoreGraphicsState];


        //// B 4 Drawing
        [NSGraphicsContext saveGraphicsState];
        CGContextTranslateCTM(context, -31, -22);
        CGContextRotateCTM(context, 90 * M_PI / 180);

        NSRect b4Rect = NSMakeRect(0, 0, 16, 22);
        {
            NSString* textContent = @"B";
            NSMutableParagraphStyle* b4Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
            b4Style.alignment = NSLeftTextAlignment;

            NSDictionary* b4FontAttributes = @{NSFontAttributeName: [NSFont systemFontOfSize: 18], NSForegroundColorAttributeName: color17, NSParagraphStyleAttributeName: b4Style};

            CGFloat b4TextHeight = NSHeight([textContent boundingRectWithSize: b4Rect.size options: NSStringDrawingUsesLineFragmentOrigin attributes: b4FontAttributes]);
            NSRect b4TextRect = NSMakeRect(NSMinX(b4Rect), NSMinY(b4Rect) + (NSHeight(b4Rect) - b4TextHeight) / 2, NSWidth(b4Rect), b4TextHeight);
            [NSGraphicsContext saveGraphicsState];
            NSRectClip(b4Rect);
            [textContent drawInRect: NSOffsetRect(b4TextRect, 0, 1) withAttributes: b4FontAttributes];
            [NSGraphicsContext restoreGraphicsState];
        }

        [NSGraphicsContext restoreGraphicsState];



        [NSGraphicsContext restoreGraphicsState];
    }
}

+ (void)drawFavouriteIconSidebarWithFrame: (NSRect)frame isStarActive: (BOOL)isStarActive
{
    //// Color Declarations
    NSColor* color10 = [NSColor colorWithCalibratedRed: 0.51 green: 0.51 blue: 0.51 alpha: 1];


    //// Subframes
    NSRect group = NSMakeRect(NSMinX(frame) + 2.5, NSMinY(frame) + floor((NSHeight(frame) - 2.5) * 0.06667) + 0.5, floor((NSWidth(frame) - 2.5) * 0.93333 + 0.5), NSHeight(frame) - 3 - floor((NSHeight(frame) - 2.5) * 0.06667));


    //// Group
    {
        //// Star Drawing
        NSBezierPath* starPath = NSBezierPath.bezierPath;
        [starPath moveToPoint: NSMakePoint(NSMinX(group) + 0.50000 * NSWidth(group), NSMinY(group) + 1.00000 * NSHeight(group))];
        [starPath lineToPoint: NSMakePoint(NSMinX(group) + 0.61756 * NSWidth(group), NSMinY(group) + 0.66180 * NSHeight(group))];
        [starPath lineToPoint: NSMakePoint(NSMinX(group) + 0.97553 * NSWidth(group), NSMinY(group) + 0.65451 * NSHeight(group))];
        [starPath lineToPoint: NSMakePoint(NSMinX(group) + 0.69021 * NSWidth(group), NSMinY(group) + 0.43820 * NSHeight(group))];
        [starPath lineToPoint: NSMakePoint(NSMinX(group) + 0.79389 * NSWidth(group), NSMinY(group) + 0.09549 * NSHeight(group))];
        [starPath lineToPoint: NSMakePoint(NSMinX(group) + 0.50000 * NSWidth(group), NSMinY(group) + 0.30000 * NSHeight(group))];
        [starPath lineToPoint: NSMakePoint(NSMinX(group) + 0.20611 * NSWidth(group), NSMinY(group) + 0.09549 * NSHeight(group))];
        [starPath lineToPoint: NSMakePoint(NSMinX(group) + 0.30979 * NSWidth(group), NSMinY(group) + 0.43820 * NSHeight(group))];
        [starPath lineToPoint: NSMakePoint(NSMinX(group) + 0.02447 * NSWidth(group), NSMinY(group) + 0.65451 * NSHeight(group))];
        [starPath lineToPoint: NSMakePoint(NSMinX(group) + 0.38244 * NSWidth(group), NSMinY(group) + 0.66180 * NSHeight(group))];
        [starPath closePath];
        [NSColor.whiteColor setFill];
        [starPath fill];
        [NSColor.whiteColor setStroke];
        [starPath setLineWidth: 1];
        [starPath stroke];


        if (isStarActive)
        {
            //// Star 2 Drawing
            NSBezierPath* star2Path = NSBezierPath.bezierPath;
            [star2Path moveToPoint: NSMakePoint(NSMinX(group) + 0.50000 * NSWidth(group), NSMinY(group) + 1.00000 * NSHeight(group))];
            [star2Path lineToPoint: NSMakePoint(NSMinX(group) + 0.61756 * NSWidth(group), NSMinY(group) + 0.66180 * NSHeight(group))];
            [star2Path lineToPoint: NSMakePoint(NSMinX(group) + 0.97553 * NSWidth(group), NSMinY(group) + 0.65451 * NSHeight(group))];
            [star2Path lineToPoint: NSMakePoint(NSMinX(group) + 0.69021 * NSWidth(group), NSMinY(group) + 0.43820 * NSHeight(group))];
            [star2Path lineToPoint: NSMakePoint(NSMinX(group) + 0.79389 * NSWidth(group), NSMinY(group) + 0.09549 * NSHeight(group))];
            [star2Path lineToPoint: NSMakePoint(NSMinX(group) + 0.50000 * NSWidth(group), NSMinY(group) + 0.30000 * NSHeight(group))];
            [star2Path lineToPoint: NSMakePoint(NSMinX(group) + 0.20611 * NSWidth(group), NSMinY(group) + 0.09549 * NSHeight(group))];
            [star2Path lineToPoint: NSMakePoint(NSMinX(group) + 0.30979 * NSWidth(group), NSMinY(group) + 0.43820 * NSHeight(group))];
            [star2Path lineToPoint: NSMakePoint(NSMinX(group) + 0.02447 * NSWidth(group), NSMinY(group) + 0.65451 * NSHeight(group))];
            [star2Path lineToPoint: NSMakePoint(NSMinX(group) + 0.38244 * NSWidth(group), NSMinY(group) + 0.66180 * NSHeight(group))];
            [star2Path closePath];
            [color10 setStroke];
            [star2Path setLineWidth: 1];
            [star2Path stroke];
        }
    }
}

+ (void)drawFavouriteIconMainWithFrame: (NSRect)frame isStarActive: (BOOL)isStarActive
{
    //// Color Declarations
    NSColor* color4 = [NSColor colorWithCalibratedRed: 0.5 green: 0.5 blue: 0.5 alpha: 1];
    NSColor* color6 = [NSColor colorWithCalibratedRed: 0.412 green: 0.412 blue: 0.412 alpha: 1];
    NSColor* color13 = [NSColor colorWithCalibratedRed: 0.949 green: 0.949 blue: 0.949 alpha: 1];


    //// Subframes
    NSRect group = NSMakeRect(NSMinX(frame) + 0.5, NSMinY(frame) + floor((NSHeight(frame) - 0.5) * 0.01266) + 0.5, floor((NSWidth(frame) - 0.5) * 0.98734 + 0.5), NSHeight(frame) - 1 - floor((NSHeight(frame) - 0.5) * 0.01266));


    //// Group
    {
        //// Star Drawing
        NSBezierPath* starPath = NSBezierPath.bezierPath;
        [starPath moveToPoint: NSMakePoint(NSMinX(group) + 0.50000 * NSWidth(group), NSMinY(group) + 0.94872 * NSHeight(group))];
        [starPath lineToPoint: NSMakePoint(NSMinX(group) + 0.59425 * NSWidth(group), NSMinY(group) + 0.62973 * NSHeight(group))];
        [starPath lineToPoint: NSMakePoint(NSMinX(group) + 0.92676 * NSWidth(group), NSMinY(group) + 0.63866 * NSHeight(group))];
        [starPath lineToPoint: NSMakePoint(NSMinX(group) + 0.65250 * NSWidth(group), NSMinY(group) + 0.45045 * NSHeight(group))];
        [starPath lineToPoint: NSMakePoint(NSMinX(group) + 0.76375 * NSWidth(group), NSMinY(group) + 0.13698 * NSHeight(group))];
        [starPath lineToPoint: NSMakePoint(NSMinX(group) + 0.50000 * NSWidth(group), NSMinY(group) + 0.33965 * NSHeight(group))];
        [starPath lineToPoint: NSMakePoint(NSMinX(group) + 0.23625 * NSWidth(group), NSMinY(group) + 0.13698 * NSHeight(group))];
        [starPath lineToPoint: NSMakePoint(NSMinX(group) + 0.34750 * NSWidth(group), NSMinY(group) + 0.45045 * NSHeight(group))];
        [starPath lineToPoint: NSMakePoint(NSMinX(group) + 0.07324 * NSWidth(group), NSMinY(group) + 0.63866 * NSHeight(group))];
        [starPath lineToPoint: NSMakePoint(NSMinX(group) + 0.40575 * NSWidth(group), NSMinY(group) + 0.62973 * NSHeight(group))];
        [starPath closePath];
        [color13 setFill];
        [starPath fill];
        [color4 setStroke];
        [starPath setLineWidth: 1];
        [starPath stroke];


        if (isStarActive)
        {
            //// StarTemplate Drawing
            NSBezierPath* starTemplatePath = NSBezierPath.bezierPath;
            [starTemplatePath moveToPoint: NSMakePoint(NSMinX(group) + 0.50000 * NSWidth(group), NSMinY(group) + 1.00000 * NSHeight(group))];
            [starTemplatePath lineToPoint: NSMakePoint(NSMinX(group) + 0.60502 * NSWidth(group), NSMinY(group) + 0.64455 * NSHeight(group))];
            [starTemplatePath lineToPoint: NSMakePoint(NSMinX(group) + 0.97553 * NSWidth(group), NSMinY(group) + 0.65451 * NSHeight(group))];
            [starTemplatePath lineToPoint: NSMakePoint(NSMinX(group) + 0.66993 * NSWidth(group), NSMinY(group) + 0.44479 * NSHeight(group))];
            [starTemplatePath lineToPoint: NSMakePoint(NSMinX(group) + 0.79389 * NSWidth(group), NSMinY(group) + 0.09549 * NSHeight(group))];
            [starTemplatePath lineToPoint: NSMakePoint(NSMinX(group) + 0.50000 * NSWidth(group), NSMinY(group) + 0.32132 * NSHeight(group))];
            [starTemplatePath lineToPoint: NSMakePoint(NSMinX(group) + 0.20611 * NSWidth(group), NSMinY(group) + 0.09549 * NSHeight(group))];
            [starTemplatePath lineToPoint: NSMakePoint(NSMinX(group) + 0.33007 * NSWidth(group), NSMinY(group) + 0.44479 * NSHeight(group))];
            [starTemplatePath lineToPoint: NSMakePoint(NSMinX(group) + 0.02447 * NSWidth(group), NSMinY(group) + 0.65451 * NSHeight(group))];
            [starTemplatePath lineToPoint: NSMakePoint(NSMinX(group) + 0.39498 * NSWidth(group), NSMinY(group) + 0.64455 * NSHeight(group))];
            [starTemplatePath closePath];
            [color6 setFill];
            [starTemplatePath fill];
        }
    }
}

+ (void)drawAuthorIcon
{

    //// Bezier Drawing
    NSBezierPath* bezierPath = NSBezierPath.bezierPath;
    [bezierPath moveToPoint: NSMakePoint(11.93, 12.03)];
    [bezierPath curveToPoint: NSMakePoint(8.5, 15.5) controlPoint1: NSMakePoint(11.93, 13.95) controlPoint2: NSMakePoint(10.39, 15.5)];
    [bezierPath curveToPoint: NSMakePoint(5.07, 12.03) controlPoint1: NSMakePoint(6.61, 15.5) controlPoint2: NSMakePoint(5.07, 13.95)];
    [bezierPath curveToPoint: NSMakePoint(8.5, 8.57) controlPoint1: NSMakePoint(5.07, 10.12) controlPoint2: NSMakePoint(6.61, 8.57)];
    [bezierPath curveToPoint: NSMakePoint(11.93, 12.03) controlPoint1: NSMakePoint(10.39, 8.57) controlPoint2: NSMakePoint(11.93, 10.12)];
    [bezierPath closePath];
    [bezierPath moveToPoint: NSMakePoint(14.5, 2.5)];
    [bezierPath curveToPoint: NSMakePoint(8.5, 8.57) controlPoint1: NSMakePoint(14.5, 5.85) controlPoint2: NSMakePoint(11.81, 8.57)];
    [bezierPath curveToPoint: NSMakePoint(2.5, 2.5) controlPoint1: NSMakePoint(5.19, 8.57) controlPoint2: NSMakePoint(2.5, 5.85)];
    [NSColor.blackColor setStroke];
    [bezierPath setLineWidth: 1];
    [bezierPath stroke];
}

+ (void)drawStarSideBarIcon
{

    //// StarSideBaricon Drawing
    NSBezierPath* starSideBariconPath = NSBezierPath.bezierPath;
    [starSideBariconPath moveToPoint: NSMakePoint(8.5, 16)];
    [starSideBariconPath lineToPoint: NSMakePoint(10.08, 10.67)];
    [starSideBariconPath lineToPoint: NSMakePoint(15.63, 10.82)];
    [starSideBariconPath lineToPoint: NSMakePoint(11.05, 7.67)];
    [starSideBariconPath lineToPoint: NSMakePoint(12.91, 2.43)];
    [starSideBariconPath lineToPoint: NSMakePoint(8.5, 5.81)];
    [starSideBariconPath lineToPoint: NSMakePoint(4.09, 2.43)];
    [starSideBariconPath lineToPoint: NSMakePoint(5.95, 7.67)];
    [starSideBariconPath lineToPoint: NSMakePoint(1.37, 10.82)];
    [starSideBariconPath lineToPoint: NSMakePoint(6.92, 10.67)];
    [starSideBariconPath closePath];
    [NSColor.blackColor setStroke];
    [starSideBariconPath setLineWidth: 1];
    [starSideBariconPath stroke];
}

+ (void)drawTrashSideBarIcon
{

    //// Bezier Drawing
    NSBezierPath* bezierPath = NSBezierPath.bezierPath;
    [bezierPath moveToPoint: NSMakePoint(2, 13.5)];
    [bezierPath lineToPoint: NSMakePoint(15, 13.5)];
    [NSColor.blackColor setStroke];
    [bezierPath setLineWidth: 1];
    [bezierPath stroke];


    //// Bezier 2 Drawing
    NSBezierPath* bezier2Path = NSBezierPath.bezierPath;
    [bezier2Path moveToPoint: NSMakePoint(4.5, 12.5)];
    [bezier2Path lineToPoint: NSMakePoint(4.5, 2.5)];
    [bezier2Path lineToPoint: NSMakePoint(12.5, 2.5)];
    [bezier2Path lineToPoint: NSMakePoint(12.5, 12.5)];
    [bezier2Path setLineJoinStyle: NSRoundLineJoinStyle];
    [NSColor.blackColor setStroke];
    [bezier2Path setLineWidth: 1];
    [bezier2Path stroke];


    //// Bezier 3 Drawing
    NSBezierPath* bezier3Path = NSBezierPath.bezierPath;
    [bezier3Path moveToPoint: NSMakePoint(6.5, 10.5)];
    [bezier3Path lineToPoint: NSMakePoint(6.5, 3.5)];
    [NSColor.blackColor setStroke];
    [bezier3Path setLineWidth: 1];
    [bezier3Path stroke];


    //// Bezier 4 Drawing
    NSBezierPath* bezier4Path = NSBezierPath.bezierPath;
    [bezier4Path moveToPoint: NSMakePoint(8.5, 10.5)];
    [bezier4Path lineToPoint: NSMakePoint(8.5, 3.5)];
    [NSColor.blackColor setStroke];
    [bezier4Path setLineWidth: 1];
    [bezier4Path stroke];


    //// Bezier 5 Drawing
    NSBezierPath* bezier5Path = NSBezierPath.bezierPath;
    [bezier5Path moveToPoint: NSMakePoint(10.5, 10.5)];
    [bezier5Path lineToPoint: NSMakePoint(10.5, 3.5)];
    [NSColor.blackColor setStroke];
    [bezier5Path setLineWidth: 1];
    [bezier5Path stroke];


    //// Bezier 6 Drawing
    NSBezierPath* bezier6Path = NSBezierPath.bezierPath;
    [bezier6Path moveToPoint: NSMakePoint(6.5, 13.5)];
    [bezier6Path lineToPoint: NSMakePoint(6.5, 14.5)];
    [bezier6Path lineToPoint: NSMakePoint(7.5, 15.5)];
    [bezier6Path lineToPoint: NSMakePoint(9.5, 15.5)];
    [bezier6Path lineToPoint: NSMakePoint(10.5, 14.5)];
    [bezier6Path lineToPoint: NSMakePoint(10.5, 13.5)];
    [NSColor.blackColor setStroke];
    [bezier6Path setLineWidth: 1];
    [bezier6Path stroke];
}

+ (void)drawRecentelyAddedIcon
{
    //// General Declarations
    CGContextRef context = (CGContextRef)NSGraphicsContext.currentContext.graphicsPort;

    //// Oval Drawing
    [NSGraphicsContext saveGraphicsState];
    CGContextTranslateCTM(context, 8.5, 9);

    NSBezierPath* ovalPath = [NSBezierPath bezierPathWithOvalInRect: NSMakeRect(-6.5, -6.5, 13, 13)];
    [NSColor.blackColor setStroke];
    [ovalPath setLineWidth: 1];
    [ovalPath stroke];

    [NSGraphicsContext restoreGraphicsState];


    //// Bezier Drawing
    NSBezierPath* bezierPath = NSBezierPath.bezierPath;
    [bezierPath moveToPoint: NSMakePoint(8.5, 13.5)];
    [bezierPath lineToPoint: NSMakePoint(8.5, 8.5)];
    [bezierPath lineToPoint: NSMakePoint(11.5, 8.5)];
    [NSColor.blackColor setStroke];
    [bezierPath setLineWidth: 1];
    [bezierPath stroke];
}

+ (void)drawCanvas3
{
    //// General Declarations
    CGContextRef context = (CGContextRef)NSGraphicsContext.currentContext.graphicsPort;

    //// Color Declarations
    NSColor* logoColor = [NSColor colorWithCalibratedRed: 0.063 green: 0.776 blue: 0.918 alpha: 1];

    //// Group 2
    {
        [NSGraphicsContext saveGraphicsState];
        CGContextTranslateCTM(context, 50.87, -39.4);
        CGContextRotateCTM(context, 45 * M_PI / 180);



        //// Bezier 3 Drawing
        [NSGraphicsContext saveGraphicsState];
        CGContextTranslateCTM(context, 0.91, 70.21);
        CGContextRotateCTM(context, -45 * M_PI / 180);

        NSBezierPath* bezier3Path = NSBezierPath.bezierPath;
        [bezier3Path moveToPoint: NSMakePoint(77.67, 0)];
        [bezier3Path curveToPoint: NSMakePoint(79.74, 2.05) controlPoint1: NSMakePoint(77.66, 0) controlPoint2: NSMakePoint(79.74, 2.05)];
        [bezier3Path lineToPoint: NSMakePoint(95.29, 17.47)];
        [bezier3Path curveToPoint: NSMakePoint(45, 67.33) controlPoint1: NSMakePoint(95.29, 17.47) controlPoint2: NSMakePoint(61.6, 50.87)];
        [bezier3Path curveToPoint: NSMakePoint(36.91, 75.35) controlPoint1: NSMakePoint(40.09, 72.2) controlPoint2: NSMakePoint(36.91, 75.35)];
        [bezier3Path curveToPoint: NSMakePoint(35.65, 76.42) controlPoint1: NSMakePoint(36.31, 75.95) controlPoint2: NSMakePoint(36.01, 76.24)];
        [bezier3Path curveToPoint: NSMakePoint(34.08, 76.46) controlPoint1: NSMakePoint(35.11, 76.68) controlPoint2: NSMakePoint(34.56, 76.68)];
        [bezier3Path curveToPoint: NSMakePoint(32.76, 75.35) controlPoint1: NSMakePoint(33.66, 76.24) controlPoint2: NSMakePoint(33.36, 75.95)];
        [bezier3Path curveToPoint: NSMakePoint(30.61, 73.22) controlPoint1: NSMakePoint(32.76, 75.35) controlPoint2: NSMakePoint(31.93, 74.53)];
        [bezier3Path curveToPoint: NSMakePoint(24.53, 67.19) controlPoint1: NSMakePoint(28.45, 71.08) controlPoint2: NSMakePoint(27.69, 70.33)];
        [bezier3Path curveToPoint: NSMakePoint(22.19, 64.88) controlPoint1: NSMakePoint(23.82, 66.5) controlPoint2: NSMakePoint(23.04, 65.73)];
        [bezier3Path lineToPoint: NSMakePoint(2.71, 45.57)];
        [bezier3Path lineToPoint: NSMakePoint(16.95, 42.21)];
        [bezier3Path lineToPoint: NSMakePoint(20.33, 28.1)];
        [bezier3Path curveToPoint: NSMakePoint(34.83, 42.47) controlPoint1: NSMakePoint(20.33, 28.1) controlPoint2: NSMakePoint(28.58, 36.28)];
        [bezier3Path curveToPoint: NSMakePoint(77.66, 0) controlPoint1: NSMakePoint(53.29, 24.16) controlPoint2: NSMakePoint(77.66, 0)];
        [bezier3Path lineToPoint: NSMakePoint(77.67, 0)];
        [bezier3Path closePath];
        [bezier3Path setLineJoinStyle: NSRoundLineJoinStyle];
        [logoColor setStroke];
        [bezier3Path setLineWidth: 3];
        [bezier3Path stroke];

        [NSGraphicsContext restoreGraphicsState];


        //// Bezier 6 Drawing
        [NSGraphicsContext saveGraphicsState];
        CGContextTranslateCTM(context, 28.28, 70.17);
        CGContextRotateCTM(context, -45 * M_PI / 180);

        NSBezierPath* bezier6Path = NSBezierPath.bezierPath;
        [bezier6Path moveToPoint: NSMakePoint(-0.67, 29.42)];
        [bezier6Path curveToPoint: NSMakePoint(16.25, 45.97) controlPoint1: NSMakePoint(-0.67, 29.42) controlPoint2: NSMakePoint(10.11, 39.96)];
        [bezier6Path curveToPoint: NSMakePoint(47.1, 15.77) controlPoint1: NSMakePoint(23.83, 38.55) controlPoint2: NSMakePoint(37.23, 25.43)];
        [bezier6Path curveToPoint: NSMakePoint(56.51, 6.57) controlPoint1: NSMakePoint(49.29, 13.63) controlPoint2: NSMakePoint(52.88, 10.12)];
        [bezier6Path curveToPoint: NSMakePoint(57.05, 6.04) controlPoint1: NSMakePoint(58.79, 4.34) controlPoint2: NSMakePoint(55.08, 7.96)];
        [bezier6Path curveToPoint: NSMakePoint(64.55, -1.3) controlPoint1: NSMakePoint(60.23, 2.92) controlPoint2: NSMakePoint(64.55, -1.3)];
        [bezier6Path lineToPoint: NSMakePoint(64.56, -1.3)];
        [bezier6Path setLineCapStyle: NSRoundLineCapStyle];
        [bezier6Path setLineJoinStyle: NSRoundLineJoinStyle];
        [logoColor setStroke];
        [bezier6Path setLineWidth: 3];
        [bezier6Path stroke];

        [NSGraphicsContext restoreGraphicsState];


        //// Bezier 4 Drawing
        [NSGraphicsContext saveGraphicsState];
        CGContextTranslateCTM(context, 20.91, 60.4);
        CGContextRotateCTM(context, -45 * M_PI / 180);

        NSBezierPath* bezier4Path = NSBezierPath.bezierPath;
        [bezier4Path moveToPoint: NSMakePoint(3.29, 35.56)];
        [bezier4Path curveToPoint: NSMakePoint(6.36, 38.57) controlPoint1: NSMakePoint(3.29, 35.56) controlPoint2: NSMakePoint(4.58, 36.82)];
        [bezier4Path curveToPoint: NSMakePoint(8.33, 40.5) controlPoint1: NSMakePoint(7.09, 39.29) controlPoint2: NSMakePoint(7.79, 39.97)];
        [bezier4Path curveToPoint: NSMakePoint(10.52, 42.65) controlPoint1: NSMakePoint(9.36, 41.51) controlPoint2: NSMakePoint(9.99, 42.13)];
        [bezier4Path curveToPoint: NSMakePoint(14.73, 46.78) controlPoint1: NSMakePoint(11.57, 43.68) controlPoint2: NSMakePoint(12.21, 44.31)];
        [bezier4Path curveToPoint: NSMakePoint(46.54, 15.61) controlPoint1: NSMakePoint(22.23, 39.43) controlPoint2: NSMakePoint(36.79, 25.16)];
        [bezier4Path curveToPoint: NSMakePoint(48.59, 13.6) controlPoint1: NSMakePoint(48.7, 13.49) controlPoint2: NSMakePoint(45.01, 17.11)];
        [bezier4Path curveToPoint: NSMakePoint(49.12, 13.07) controlPoint1: NSMakePoint(50.84, 11.39) controlPoint2: NSMakePoint(47.18, 14.98)];
        [bezier4Path curveToPoint: NSMakePoint(57.2, 5.16) controlPoint1: NSMakePoint(52.27, 9.99) controlPoint2: NSMakePoint(57.2, 5.16)];
        [bezier4Path lineToPoint: NSMakePoint(57.2, 5.16)];
        [bezier4Path setLineCapStyle: NSRoundLineCapStyle];
        [bezier4Path setLineJoinStyle: NSRoundLineJoinStyle];
        [logoColor setStroke];
        [bezier4Path setLineWidth: 3];
        [bezier4Path stroke];

        [NSGraphicsContext restoreGraphicsState];



        [NSGraphicsContext restoreGraphicsState];
    }
}

+ (void)drawInkedMargin512pt
{
    //// General Declarations
    CGContextRef context = (CGContextRef)NSGraphicsContext.currentContext.graphicsPort;

    //// Color Declarations
    NSColor* gradientColor3 = [NSColor colorWithCalibratedRed: 0.373 green: 0.961 blue: 0.769 alpha: 1];
    NSColor* gradientColor4 = [NSColor colorWithCalibratedRed: 0 green: 0.792 blue: 0.765 alpha: 1];

    //// Gradient Declarations
    NSGradient* gradient = [NSGradient.alloc initWithColorsAndLocations: 
        gradientColor3, 0.0, 
        gradientColor4, 1.0, nil];

    //// Group 2
    {
        [NSGraphicsContext saveGraphicsState];
        CGContextTranslateCTM(context, -33.13, 334.4);
        CGContextRotateCTM(context, -45 * M_PI / 180);



        //// Rectangle Drawing
        [NSGraphicsContext saveGraphicsState];
        CGContextTranslateCTM(context, 282.51, -190.4);
        CGContextRotateCTM(context, 45 * M_PI / 180);

        NSBezierPath* rectanglePath = [NSBezierPath bezierPathWithRoundedRect: NSMakeRect(0, 0, 448, 512) xRadius: 20 yRadius: 20];
        [gradient drawInBezierPath: rectanglePath angle: -90];

        [NSGraphicsContext restoreGraphicsState];


        //// Bezier 3 Drawing
        [NSGraphicsContext saveGraphicsState];
        CGContextTranslateCTM(context, 23.48, 115.95);
        CGContextRotateCTM(context, 45 * M_PI / 180);

        NSBezierPath* bezier3Path = NSBezierPath.bezierPath;
        [bezier3Path moveToPoint: NSMakePoint(299.03, -0.01)];
        [bezier3Path curveToPoint: NSMakePoint(307.22, -7.98) controlPoint1: NSMakePoint(299.02, -0) controlPoint2: NSMakePoint(307.22, -7.98)];
        [bezier3Path lineToPoint: NSMakePoint(368.75, -67.88)];
        [bezier3Path curveToPoint: NSMakePoint(169.78, -261.59) controlPoint1: NSMakePoint(368.75, -67.88) controlPoint2: NSMakePoint(235.49, -197.62)];
        [bezier3Path curveToPoint: NSMakePoint(137.78, -292.75) controlPoint1: NSMakePoint(150.36, -280.5) controlPoint2: NSMakePoint(137.78, -292.75)];
        [bezier3Path curveToPoint: NSMakePoint(132.82, -296.9) controlPoint1: NSMakePoint(135.42, -295.05) controlPoint2: NSMakePoint(134.24, -296.2)];
        [bezier3Path curveToPoint: NSMakePoint(126.6, -297.05) controlPoint1: NSMakePoint(130.67, -297.91) controlPoint2: NSMakePoint(128.49, -297.91)];
        [bezier3Path curveToPoint: NSMakePoint(121.38, -292.75) controlPoint1: NSMakePoint(124.92, -296.2) controlPoint2: NSMakePoint(123.74, -295.05)];
        [bezier3Path curveToPoint: NSMakePoint(112.88, -284.48) controlPoint1: NSMakePoint(121.38, -292.75) controlPoint2: NSMakePoint(118.08, -289.54)];
        [bezier3Path curveToPoint: NSMakePoint(88.82, -261.05) controlPoint1: NSMakePoint(104.31, -276.14) controlPoint2: NSMakePoint(101.33, -273.24)];
        [bezier3Path curveToPoint: NSMakePoint(79.54, -252.06) controlPoint1: NSMakePoint(85.99, -258.34) controlPoint2: NSMakePoint(82.93, -255.36)];
        [bezier3Path lineToPoint: NSMakePoint(2.49, -177.04)];
        [bezier3Path lineToPoint: NSMakePoint(58.81, -163.99)];
        [bezier3Path lineToPoint: NSMakePoint(72.22, -109.16)];
        [bezier3Path curveToPoint: NSMakePoint(129.56, -164.99) controlPoint1: NSMakePoint(72.22, -109.16) controlPoint2: NSMakePoint(104.85, -140.94)];
        [bezier3Path curveToPoint: NSMakePoint(299.02, -0) controlPoint1: NSMakePoint(202.61, -93.87) controlPoint2: NSMakePoint(299.02, -0)];
        [bezier3Path lineToPoint: NSMakePoint(299.03, -0.01)];
        [bezier3Path closePath];
        [bezier3Path setLineJoinStyle: NSRoundLineJoinStyle];
        [NSColor.whiteColor setFill];
        [bezier3Path fill];
        [NSColor.whiteColor setStroke];
        [bezier3Path setLineWidth: 6];
        [bezier3Path stroke];

        [NSGraphicsContext restoreGraphicsState];



        [NSGraphicsContext restoreGraphicsState];
    }
}

+ (void)drawInkedMargin256pt
{
    //// General Declarations
    CGContextRef context = (CGContextRef)NSGraphicsContext.currentContext.graphicsPort;

    //// Color Declarations
    NSColor* gradientColor3 = [NSColor colorWithCalibratedRed: 0.373 green: 0.961 blue: 0.769 alpha: 1];
    NSColor* gradientColor4 = [NSColor colorWithCalibratedRed: 0 green: 0.792 blue: 0.765 alpha: 1];

    //// Gradient Declarations
    NSGradient* gradient = [NSGradient.alloc initWithColorsAndLocations: 
        gradientColor3, 0.0, 
        gradientColor4, 1.0, nil];

    //// Group 2
    {
        [NSGraphicsContext saveGraphicsState];
        CGContextTranslateCTM(context, 33.87, 213.4);
        CGContextRotateCTM(context, -45 * M_PI / 180);



        //// Rectangle Drawing
        [NSGraphicsContext saveGraphicsState];
        CGContextTranslateCTM(context, 138.26, -163.53);
        CGContextRotateCTM(context, 45 * M_PI / 180);

        NSBezierPath* rectanglePath = [NSBezierPath bezierPathWithRoundedRect: NSMakeRect(0, 0, 224, 256) xRadius: 10 yRadius: 10];
        [gradient drawInBezierPath: rectanglePath angle: -90];

        [NSGraphicsContext restoreGraphicsState];


        //// Bezier 3 Drawing
        [NSGraphicsContext saveGraphicsState];
        CGContextTranslateCTM(context, 6.37, -11.92);
        CGContextRotateCTM(context, 45 * M_PI / 180);

        NSBezierPath* bezier3Path = NSBezierPath.bezierPath;
        [bezier3Path moveToPoint: NSMakePoint(151.56, -0)];
        [bezier3Path curveToPoint: NSMakePoint(155.68, -4.05) controlPoint1: NSMakePoint(151.56, -0) controlPoint2: NSMakePoint(155.68, -4.05)];
        [bezier3Path lineToPoint: NSMakePoint(186.58, -34.42)];
        [bezier3Path curveToPoint: NSMakePoint(86.64, -132.65) controlPoint1: NSMakePoint(186.58, -34.42) controlPoint2: NSMakePoint(119.64, -100.21)];
        [bezier3Path curveToPoint: NSMakePoint(70.56, -148.45) controlPoint1: NSMakePoint(76.88, -142.23) controlPoint2: NSMakePoint(70.56, -148.45)];
        [bezier3Path curveToPoint: NSMakePoint(68.07, -150.55) controlPoint1: NSMakePoint(69.37, -149.61) controlPoint2: NSMakePoint(68.78, -150.19)];
        [bezier3Path curveToPoint: NSMakePoint(64.94, -150.62) controlPoint1: NSMakePoint(66.99, -151.06) controlPoint2: NSMakePoint(65.89, -151.06)];
        [bezier3Path curveToPoint: NSMakePoint(62.32, -148.45) controlPoint1: NSMakePoint(64.1, -150.19) controlPoint2: NSMakePoint(63.51, -149.61)];
        [bezier3Path curveToPoint: NSMakePoint(58.05, -144.25) controlPoint1: NSMakePoint(62.32, -148.45) controlPoint2: NSMakePoint(60.66, -146.81)];
        [bezier3Path curveToPoint: NSMakePoint(45.97, -132.37) controlPoint1: NSMakePoint(53.75, -140.02) controlPoint2: NSMakePoint(52.25, -138.55)];
        [bezier3Path curveToPoint: NSMakePoint(41.3, -127.81) controlPoint1: NSMakePoint(44.54, -131) controlPoint2: NSMakePoint(43.01, -129.48)];
        [bezier3Path lineToPoint: NSMakePoint(2.6, -89.77)];
        [bezier3Path lineToPoint: NSMakePoint(30.89, -83.15)];
        [bezier3Path lineToPoint: NSMakePoint(37.62, -55.35)];
        [bezier3Path curveToPoint: NSMakePoint(66.43, -83.66) controlPoint1: NSMakePoint(37.62, -55.35) controlPoint2: NSMakePoint(54.02, -71.47)];
        [bezier3Path curveToPoint: NSMakePoint(151.56, 0) controlPoint1: NSMakePoint(103.13, -47.6) controlPoint2: NSMakePoint(151.56, 0)];
        [bezier3Path lineToPoint: NSMakePoint(151.56, -0)];
        [bezier3Path closePath];
        [bezier3Path setLineJoinStyle: NSRoundLineJoinStyle];
        [NSColor.whiteColor setFill];
        [bezier3Path fill];
        [NSColor.whiteColor setStroke];
        [bezier3Path setLineWidth: 3];
        [bezier3Path stroke];

        [NSGraphicsContext restoreGraphicsState];



        [NSGraphicsContext restoreGraphicsState];
    }
}

+ (void)drawInkedMargin128pt
{
    //// General Declarations
    CGContextRef context = (CGContextRef)NSGraphicsContext.currentContext.graphicsPort;

    //// Color Declarations
    NSColor* gradientColor3 = [NSColor colorWithCalibratedRed: 0.373 green: 0.961 blue: 0.769 alpha: 1];
    NSColor* gradientColor4 = [NSColor colorWithCalibratedRed: 0 green: 0.792 blue: 0.765 alpha: 1];

    //// Gradient Declarations
    NSGradient* gradient = [NSGradient.alloc initWithColorsAndLocations: 
        gradientColor3, 0.0, 
        gradientColor4, 1.0, nil];

    //// Group 2
    {
        [NSGraphicsContext saveGraphicsState];
        CGContextTranslateCTM(context, 57.87, 154.4);
        CGContextRotateCTM(context, -45 * M_PI / 180);



        //// Rectangle Drawing
        [NSGraphicsContext saveGraphicsState];
        CGContextTranslateCTM(context, 68.25, -138.78);
        CGContextRotateCTM(context, 45 * M_PI / 180);

        NSBezierPath* rectanglePath = [NSBezierPath bezierPathWithRoundedRect: NSMakeRect(0, 0, 112, 112) xRadius: 5 yRadius: 5];
        [gradient drawInBezierPath: rectanglePath angle: -90];

        [NSGraphicsContext restoreGraphicsState];


        //// Bezier 3 Drawing
        [NSGraphicsContext saveGraphicsState];
        CGContextTranslateCTM(context, 4.16, -67.6);
        CGContextRotateCTM(context, 45 * M_PI / 180);

        NSBezierPath* bezier3Path = NSBezierPath.bezierPath;
        [bezier3Path moveToPoint: NSMakePoint(80.13, -0)];
        [bezier3Path curveToPoint: NSMakePoint(82.27, -2.1) controlPoint1: NSMakePoint(80.13, -0) controlPoint2: NSMakePoint(82.27, -2.1)];
        [bezier3Path lineToPoint: NSMakePoint(98.33, -17.86)];
        [bezier3Path curveToPoint: NSMakePoint(46.39, -68.81) controlPoint1: NSMakePoint(98.33, -17.86) controlPoint2: NSMakePoint(63.54, -51.99)];
        [bezier3Path curveToPoint: NSMakePoint(38.03, -77.01) controlPoint1: NSMakePoint(41.32, -73.79) controlPoint2: NSMakePoint(38.03, -77.01)];
        [bezier3Path curveToPoint: NSMakePoint(36.74, -78.1) controlPoint1: NSMakePoint(37.42, -77.61) controlPoint2: NSMakePoint(37.11, -77.92)];
        [bezier3Path curveToPoint: NSMakePoint(35.11, -78.14) controlPoint1: NSMakePoint(36.18, -78.37) controlPoint2: NSMakePoint(35.61, -78.37)];
        [bezier3Path curveToPoint: NSMakePoint(33.75, -77.01) controlPoint1: NSMakePoint(34.68, -77.92) controlPoint2: NSMakePoint(34.37, -77.61)];
        [bezier3Path curveToPoint: NSMakePoint(31.53, -74.83) controlPoint1: NSMakePoint(33.75, -77.01) controlPoint2: NSMakePoint(32.89, -76.16)];
        [bezier3Path curveToPoint: NSMakePoint(25.25, -68.67) controlPoint1: NSMakePoint(29.29, -72.64) controlPoint2: NSMakePoint(28.52, -71.88)];
        [bezier3Path curveToPoint: NSMakePoint(22.83, -66.3) controlPoint1: NSMakePoint(24.51, -67.96) controlPoint2: NSMakePoint(23.71, -67.17)];
        [bezier3Path lineToPoint: NSMakePoint(2.71, -46.57)];
        [bezier3Path lineToPoint: NSMakePoint(17.41, -43.14)];
        [bezier3Path lineToPoint: NSMakePoint(20.91, -28.72)];
        [bezier3Path curveToPoint: NSMakePoint(35.89, -43.4) controlPoint1: NSMakePoint(20.91, -28.72) controlPoint2: NSMakePoint(29.44, -37.07)];
        [bezier3Path curveToPoint: NSMakePoint(80.13, 0) controlPoint1: NSMakePoint(54.96, -24.69) controlPoint2: NSMakePoint(80.13, 0)];
        [bezier3Path lineToPoint: NSMakePoint(80.13, -0)];
        [bezier3Path closePath];
        [bezier3Path setLineJoinStyle: NSRoundLineJoinStyle];
        [NSColor.whiteColor setFill];
        [bezier3Path fill];
        [NSColor.whiteColor setStroke];
        [bezier3Path setLineWidth: 2];
        [bezier3Path stroke];

        [NSGraphicsContext restoreGraphicsState];



        [NSGraphicsContext restoreGraphicsState];
    }
}

+ (void)drawInkedMargin32pt
{
    //// General Declarations
    CGContextRef context = (CGContextRef)NSGraphicsContext.currentContext.graphicsPort;

    //// Color Declarations
    NSColor* gradientColor3 = [NSColor colorWithCalibratedRed: 0.373 green: 0.961 blue: 0.769 alpha: 1];
    NSColor* gradientColor4 = [NSColor colorWithCalibratedRed: 0 green: 0.792 blue: 0.765 alpha: 1];

    //// Gradient Declarations
    NSGradient* gradient = [NSGradient.alloc initWithColorsAndLocations: 
        gradientColor3, 0.0, 
        gradientColor4, 1.0, nil];

    //// Group 2
    {
        [NSGraphicsContext saveGraphicsState];
        CGContextTranslateCTM(context, 76.87, 107.4);
        CGContextRotateCTM(context, -45 * M_PI / 180);



        //// Rectangle Drawing
        [NSGraphicsContext saveGraphicsState];
        CGContextTranslateCTM(context, 23, -128.88);
        CGContextRotateCTM(context, 45 * M_PI / 180);

        NSBezierPath* rectanglePath = [NSBezierPath bezierPathWithRoundedRect: NSMakeRect(0, 0, 28, 32) xRadius: 2.5 yRadius: 2.5];
        [gradient drawInBezierPath: rectanglePath angle: -90];

        [NSGraphicsContext restoreGraphicsState];


        //// Bezier 3 Drawing
        [NSGraphicsContext saveGraphicsState];
        CGContextTranslateCTM(context, 6.11, -112.2);
        CGContextRotateCTM(context, 45 * M_PI / 180);

        NSBezierPath* bezier3Path = NSBezierPath.bezierPath;
        [bezier3Path moveToPoint: NSMakePoint(20.28, -0)];
        [bezier3Path lineToPoint: NSMakePoint(20.77, -0.46)];
        [bezier3Path lineToPoint: NSMakePoint(24.41, -3.93)];
        [bezier3Path curveToPoint: NSMakePoint(12.62, -15.14) controlPoint1: NSMakePoint(24.41, -3.93) controlPoint2: NSMakePoint(16.52, -11.44)];
        [bezier3Path curveToPoint: NSMakePoint(10.73, -16.94) controlPoint1: NSMakePoint(11.47, -16.23) controlPoint2: NSMakePoint(10.73, -16.94)];
        [bezier3Path curveToPoint: NSMakePoint(10.43, -17.18) controlPoint1: NSMakePoint(10.59, -17.08) controlPoint2: NSMakePoint(10.52, -17.14)];
        [bezier3Path curveToPoint: NSMakePoint(10.06, -17.19) controlPoint1: NSMakePoint(10.31, -17.24) controlPoint2: NSMakePoint(10.18, -17.24)];
        [bezier3Path curveToPoint: NSMakePoint(9.76, -16.94) controlPoint1: NSMakePoint(9.96, -17.14) controlPoint2: NSMakePoint(9.89, -17.08)];
        [bezier3Path curveToPoint: NSMakePoint(9.25, -16.46) controlPoint1: NSMakePoint(9.76, -16.94) controlPoint2: NSMakePoint(9.56, -16.76)];
        [bezier3Path curveToPoint: NSMakePoint(7.83, -15.11) controlPoint1: NSMakePoint(8.74, -15.98) controlPoint2: NSMakePoint(8.57, -15.81)];
        [bezier3Path curveToPoint: NSMakePoint(7.28, -14.59) controlPoint1: NSMakePoint(7.66, -14.95) controlPoint2: NSMakePoint(7.48, -14.78)];
        [bezier3Path lineToPoint: NSMakePoint(2.71, -10.25)];
        [bezier3Path lineToPoint: NSMakePoint(6.05, -9.49)];
        [bezier3Path lineToPoint: NSMakePoint(6.84, -6.32)];
        [bezier3Path curveToPoint: NSMakePoint(10.24, -9.55) controlPoint1: NSMakePoint(6.84, -6.32) controlPoint2: NSMakePoint(8.78, -8.16)];
        [bezier3Path curveToPoint: NSMakePoint(20.28, 0) controlPoint1: NSMakePoint(14.57, -5.43) controlPoint2: NSMakePoint(20.28, 0)];
        [bezier3Path lineToPoint: NSMakePoint(20.28, -0)];
        [bezier3Path closePath];
        [bezier3Path setLineJoinStyle: NSRoundLineJoinStyle];
        [NSColor.whiteColor setFill];
        [bezier3Path fill];
        [NSColor.whiteColor setStroke];
        [bezier3Path setLineWidth: 1];
        [bezier3Path stroke];

        [NSGraphicsContext restoreGraphicsState];



        [NSGraphicsContext restoreGraphicsState];
    }
}

+ (void)drawInkedMargin16pt
{
    //// General Declarations
    CGContextRef context = (CGContextRef)NSGraphicsContext.currentContext.graphicsPort;

    //// Color Declarations
    NSColor* gradientColor3 = [NSColor colorWithCalibratedRed: 0.373 green: 0.961 blue: 0.769 alpha: 1];
    NSColor* gradientColor4 = [NSColor colorWithCalibratedRed: 0 green: 0.792 blue: 0.765 alpha: 1];

    //// Gradient Declarations
    NSGradient* gradient = [NSGradient.alloc initWithColorsAndLocations: 
        gradientColor3, 0.0, 
        gradientColor4, 1.0, nil];

    //// Group 2
    {
        [NSGraphicsContext saveGraphicsState];
        CGContextTranslateCTM(context, 76.87, 102.4);
        CGContextRotateCTM(context, -45 * M_PI / 180);



        //// Rectangle Drawing
        [NSGraphicsContext saveGraphicsState];
        CGContextTranslateCTM(context, 18.75, -126.06);
        CGContextRotateCTM(context, 45 * M_PI / 180);

        NSBezierPath* rectanglePath = [NSBezierPath bezierPathWithRoundedRect: NSMakeRect(0, 0, 14, 16) xRadius: 1.25 yRadius: 1.25];
        [gradient drawInBezierPath: rectanglePath angle: -90];

        [NSGraphicsContext restoreGraphicsState];


        //// Bezier 3 Drawing
        [NSGraphicsContext saveGraphicsState];
        CGContextTranslateCTM(context, 9.02, -118.48);
        CGContextRotateCTM(context, 45 * M_PI / 180);

        NSBezierPath* bezier3Path = NSBezierPath.bezierPath;
        [bezier3Path moveToPoint: NSMakePoint(12.09, -0)];
        [bezier3Path lineToPoint: NSMakePoint(12.35, -0.22)];
        [bezier3Path lineToPoint: NSMakePoint(14.29, -1.9)];
        [bezier3Path curveToPoint: NSMakePoint(8, -7.33) controlPoint1: NSMakePoint(14.29, -1.9) controlPoint2: NSMakePoint(10.08, -5.54)];
        [bezier3Path curveToPoint: NSMakePoint(6.99, -8.21) controlPoint1: NSMakePoint(7.39, -7.86) controlPoint2: NSMakePoint(6.99, -8.21)];
        [bezier3Path curveToPoint: NSMakePoint(6.83, -8.32) controlPoint1: NSMakePoint(6.91, -8.27) controlPoint2: NSMakePoint(6.88, -8.3)];
        [bezier3Path curveToPoint: NSMakePoint(6.64, -8.33) controlPoint1: NSMakePoint(6.76, -8.35) controlPoint2: NSMakePoint(6.7, -8.35)];
        [bezier3Path curveToPoint: NSMakePoint(6.47, -8.21) controlPoint1: NSMakePoint(6.58, -8.3) controlPoint2: NSMakePoint(6.55, -8.27)];
        [bezier3Path curveToPoint: NSMakePoint(6.2, -7.98) controlPoint1: NSMakePoint(6.47, -8.21) controlPoint2: NSMakePoint(6.37, -8.12)];
        [bezier3Path curveToPoint: NSMakePoint(5.44, -7.32) controlPoint1: NSMakePoint(5.93, -7.74) controlPoint2: NSMakePoint(5.84, -7.66)];
        [bezier3Path curveToPoint: NSMakePoint(5.15, -7.07) controlPoint1: NSMakePoint(5.35, -7.24) controlPoint2: NSMakePoint(5.25, -7.16)];
        [bezier3Path lineToPoint: NSMakePoint(2.71, -4.96)];
        [bezier3Path lineToPoint: NSMakePoint(4.49, -4.6)];
        [bezier3Path lineToPoint: NSMakePoint(4.92, -3.06)];
        [bezier3Path curveToPoint: NSMakePoint(6.73, -4.63) controlPoint1: NSMakePoint(4.92, -3.06) controlPoint2: NSMakePoint(5.95, -3.95)];
        [bezier3Path curveToPoint: NSMakePoint(12.09, 0) controlPoint1: NSMakePoint(9.04, -2.63) controlPoint2: NSMakePoint(12.09, 0)];
        [bezier3Path lineToPoint: NSMakePoint(12.09, -0)];
        [bezier3Path closePath];
        [bezier3Path setLineJoinStyle: NSRoundLineJoinStyle];
        [NSColor.whiteColor setFill];
        [bezier3Path fill];
        [NSColor.whiteColor setStroke];
        [bezier3Path setLineWidth: 0.5];
        [bezier3Path stroke];

        [NSGraphicsContext restoreGraphicsState];



        [NSGraphicsContext restoreGraphicsState];
    }
}

+ (void)drawEmptyDatabaseView
{
    //// General Declarations
    CGContextRef context = (CGContextRef)NSGraphicsContext.currentContext.graphicsPort;

    //// Color Declarations
    NSColor* color16 = [NSColor colorWithCalibratedRed: 0.286 green: 0.325 blue: 0.373 alpha: 1];
    NSColor* color17 = [NSColor colorWithCalibratedRed: 0.537 green: 0.565 blue: 0.592 alpha: 1];
    NSColor* color18 = [NSColor colorWithCalibratedRed: 0.855 green: 0.863 blue: 0.875 alpha: 1];
    NSColor* color19 = [NSColor colorWithCalibratedRed: 0.769 green: 0.78 blue: 0.792 alpha: 1];
    NSColor* color21 = [NSColor colorWithCalibratedRed: 0.2 green: 0.267 blue: 0.322 alpha: 1];

    //// Group
    {
        //// Rectangle 2 Drawing
        NSBezierPath* rectangle2Path = [NSBezierPath bezierPathWithRoundedRect: NSMakeRect(208, 209, 26, 22) xRadius: 2 yRadius: 2];
        [color18 setFill];
        [rectangle2Path fill];
        [color16 setStroke];
        [rectangle2Path setLineWidth: 1];
        [rectangle2Path stroke];


        //// Bezier Drawing
        NSBezierPath* bezierPath = NSBezierPath.bezierPath;
        [bezierPath moveToPoint: NSMakePoint(241, 206)];
        [bezierPath lineToPoint: NSMakePoint(241, 170)];
        [bezierPath curveToPoint: NSMakePoint(240.41, 167.9) controlPoint1: NSMakePoint(241, 169.23) controlPoint2: NSMakePoint(240.78, 168.51)];
        [bezierPath curveToPoint: NSMakePoint(240.97, 167.49) controlPoint1: NSMakePoint(240.77, 167.64) controlPoint2: NSMakePoint(240.97, 167.49)];
        [bezierPath lineToPoint: NSMakePoint(233.34, 144.01)];
        [bezierPath lineToPoint: NSMakePoint(227, 144.01)];
        [bezierPath curveToPoint: NSMakePoint(227, 141) controlPoint1: NSMakePoint(227, 144) controlPoint2: NSMakePoint(227, 141)];
        [bezierPath curveToPoint: NSMakePoint(225, 139) controlPoint1: NSMakePoint(227, 139.9) controlPoint2: NSMakePoint(226.1, 139)];
        [bezierPath lineToPoint: NSMakePoint(223, 139)];
        [bezierPath lineToPoint: NSMakePoint(223, 100)];
        [bezierPath lineToPoint: NSMakePoint(219, 100)];
        [bezierPath lineToPoint: NSMakePoint(219, 139)];
        [bezierPath lineToPoint: NSMakePoint(217, 139)];
        [bezierPath curveToPoint: NSMakePoint(215, 141) controlPoint1: NSMakePoint(215.9, 139) controlPoint2: NSMakePoint(215, 139.9)];
        [bezierPath lineToPoint: NSMakePoint(215, 144)];
        [bezierPath lineToPoint: NSMakePoint(208.66, 144.01)];
        [bezierPath lineToPoint: NSMakePoint(201.03, 167.49)];
        [bezierPath curveToPoint: NSMakePoint(201.59, 167.9) controlPoint1: NSMakePoint(201.03, 167.49) controlPoint2: NSMakePoint(201.23, 167.64)];
        [bezierPath curveToPoint: NSMakePoint(201, 170) controlPoint1: NSMakePoint(201.22, 168.51) controlPoint2: NSMakePoint(201, 169.23)];
        [bezierPath curveToPoint: NSMakePoint(201, 171.8) controlPoint1: NSMakePoint(201, 170) controlPoint2: NSMakePoint(201, 170.66)];
        [bezierPath curveToPoint: NSMakePoint(201, 206) controlPoint1: NSMakePoint(201, 179.09) controlPoint2: NSMakePoint(201, 206)];
        [bezierPath curveToPoint: NSMakePoint(205, 210) controlPoint1: NSMakePoint(201, 208.21) controlPoint2: NSMakePoint(202.79, 210)];
        [bezierPath lineToPoint: NSMakePoint(237, 210)];
        [bezierPath curveToPoint: NSMakePoint(241, 206) controlPoint1: NSMakePoint(239.21, 210) controlPoint2: NSMakePoint(241, 208.21)];
        [bezierPath closePath];
        [bezierPath setLineJoinStyle: NSRoundLineJoinStyle];
        [color17 setFill];
        [bezierPath fill];
        [color16 setStroke];
        [bezierPath setLineWidth: 1];
        [bezierPath stroke];


        //// Rectangle 3 Drawing
        NSBezierPath* rectangle3Path = [NSBezierPath bezierPathWithRoundedRect: NSMakeRect(211.5, 218.5, 4, 4) xRadius: 1 yRadius: 1];
        [NSColor.whiteColor setFill];
        [rectangle3Path fill];
        [color19 setStroke];
        [rectangle3Path setLineWidth: 1];
        [rectangle3Path stroke];


        //// Rectangle Drawing
        NSBezierPath* rectanglePath = [NSBezierPath bezierPathWithRoundedRect: NSMakeRect(226.5, 218.5, 4, 4) xRadius: 1 yRadius: 1];
        [NSColor.whiteColor setFill];
        [rectanglePath fill];
        [color19 setStroke];
        [rectanglePath setLineWidth: 1];
        [rectanglePath stroke];


        //// Oval Drawing
        NSRect ovalRect = NSMakeRect(216.5, 190, 10, 10);
        NSBezierPath* ovalPath = NSBezierPath.bezierPath;
        [ovalPath appendBezierPathWithArcWithCenter: NSMakePoint(NSMidX(ovalRect), NSMidY(ovalRect)) radius: NSWidth(ovalRect) / 2 startAngle: 0 endAngle: 180 clockwise: YES];
        [ovalPath lineToPoint: NSMakePoint(NSMidX(ovalRect), NSMidY(ovalRect))];
        [ovalPath closePath];

        [color18 setFill];
        [ovalPath fill];
        [color16 setStroke];
        [ovalPath setLineWidth: 1];
        [ovalPath stroke];


        //// Oval 2 Drawing
        NSRect oval2Rect = NSMakeRect(228.5, 198.5, 5, 5);
        NSBezierPath* oval2Path = NSBezierPath.bezierPath;
        [oval2Path appendBezierPathWithArcWithCenter: NSMakePoint(NSMidX(oval2Rect), NSMidY(oval2Rect)) radius: NSWidth(oval2Rect) / 2 startAngle: 0 endAngle: -180 clockwise: YES];

        [color16 setStroke];
        [oval2Path setLineWidth: 1];
        [oval2Path stroke];


        //// Oval 3 Drawing
        NSRect oval3Rect = NSMakeRect(208.5, 198.5, 5, 5);
        NSBezierPath* oval3Path = NSBezierPath.bezierPath;
        [oval3Path appendBezierPathWithArcWithCenter: NSMakePoint(NSMidX(oval3Rect), NSMidY(oval3Rect)) radius: NSWidth(oval3Rect) / 2 startAngle: 0 endAngle: -180 clockwise: YES];

        [color16 setStroke];
        [oval3Path setLineWidth: 1];
        [oval3Path stroke];
    }


    //// Text Drawing
    [NSGraphicsContext saveGraphicsState];
    CGContextTranslateCTM(context, 239.53, 231);
    CGContextRotateCTM(context, 4 * M_PI / 180);

    NSRect textRect = NSMakeRect(0, 0, 15, 22);
    {
        NSString* textContent = @"H";
        NSMutableParagraphStyle* textStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        textStyle.alignment = NSLeftTextAlignment;

        NSDictionary* textFontAttributes = @{NSFontAttributeName: [NSFont systemFontOfSize: 18], NSForegroundColorAttributeName: color18, NSParagraphStyleAttributeName: textStyle};

        CGFloat textTextHeight = NSHeight([textContent boundingRectWithSize: textRect.size options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes]);
        NSRect textTextRect = NSMakeRect(NSMinX(textRect), NSMinY(textRect) + (NSHeight(textRect) - textTextHeight) / 2, NSWidth(textRect), textTextHeight);
        [NSGraphicsContext saveGraphicsState];
        NSRectClip(textRect);
        [textContent drawInRect: NSOffsetRect(textTextRect, 0, 1) withAttributes: textFontAttributes];
        [NSGraphicsContext restoreGraphicsState];
    }

    [NSGraphicsContext restoreGraphicsState];


    //// Text 2 Drawing
    [NSGraphicsContext saveGraphicsState];
    CGContextTranslateCTM(context, 219, 257.6);
    CGContextRotateCTM(context, -10 * M_PI / 180);

    NSRect text2Rect = NSMakeRect(0, 0, 15, 22);
    {
        NSString* textContent = @"E";
        NSMutableParagraphStyle* text2Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        text2Style.alignment = NSLeftTextAlignment;

        NSDictionary* text2FontAttributes = @{NSFontAttributeName: [NSFont systemFontOfSize: 14], NSForegroundColorAttributeName: color18, NSParagraphStyleAttributeName: text2Style};

        CGFloat text2TextHeight = NSHeight([textContent boundingRectWithSize: text2Rect.size options: NSStringDrawingUsesLineFragmentOrigin attributes: text2FontAttributes]);
        NSRect text2TextRect = NSMakeRect(NSMinX(text2Rect), NSMinY(text2Rect) + (NSHeight(text2Rect) - text2TextHeight) / 2, NSWidth(text2Rect), text2TextHeight);
        [NSGraphicsContext saveGraphicsState];
        NSRectClip(text2Rect);
        [textContent drawInRect: NSOffsetRect(text2TextRect, 0, 1) withAttributes: text2FontAttributes];
        [NSGraphicsContext restoreGraphicsState];
    }

    [NSGraphicsContext restoreGraphicsState];


    //// Text 3 Drawing
    [NSGraphicsContext saveGraphicsState];
    CGContextTranslateCTM(context, 198.06, 237);
    CGContextRotateCTM(context, 8 * M_PI / 180);

    NSRect text3Rect = NSMakeRect(0, 0, 15, 22);
    {
        NSString* textContent = @"K";
        NSMutableParagraphStyle* text3Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        text3Style.alignment = NSLeftTextAlignment;

        NSDictionary* text3FontAttributes = @{NSFontAttributeName: [NSFont systemFontOfSize: 16], NSForegroundColorAttributeName: color18, NSParagraphStyleAttributeName: text3Style};

        CGFloat text3TextHeight = NSHeight([textContent boundingRectWithSize: text3Rect.size options: NSStringDrawingUsesLineFragmentOrigin attributes: text3FontAttributes]);
        NSRect text3TextRect = NSMakeRect(NSMinX(text3Rect), NSMinY(text3Rect) + (NSHeight(text3Rect) - text3TextHeight) / 2, NSWidth(text3Rect), text3TextHeight);
        [NSGraphicsContext saveGraphicsState];
        NSRectClip(text3Rect);
        [textContent drawInRect: NSOffsetRect(text3TextRect, 0, 0) withAttributes: text3FontAttributes];
        [NSGraphicsContext restoreGraphicsState];
    }

    [NSGraphicsContext restoreGraphicsState];


    //// Text 4 Drawing
    [NSGraphicsContext saveGraphicsState];
    CGContextTranslateCTM(context, 206, 277);
    CGContextRotateCTM(context, 6 * M_PI / 180);

    NSRect text4Rect = NSMakeRect(0, 0, 15, 22);
    {
        NSString* textContent = @"N";
        NSMutableParagraphStyle* text4Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        text4Style.alignment = NSLeftTextAlignment;

        NSDictionary* text4FontAttributes = @{NSFontAttributeName: [NSFont systemFontOfSize: 12], NSForegroundColorAttributeName: color18, NSParagraphStyleAttributeName: text4Style};

        CGFloat text4TextHeight = NSHeight([textContent boundingRectWithSize: text4Rect.size options: NSStringDrawingUsesLineFragmentOrigin attributes: text4FontAttributes]);
        NSRect text4TextRect = NSMakeRect(NSMinX(text4Rect), NSMinY(text4Rect) + (NSHeight(text4Rect) - text4TextHeight) / 2, NSWidth(text4Rect), text4TextHeight);
        [NSGraphicsContext saveGraphicsState];
        NSRectClip(text4Rect);
        [textContent drawInRect: NSOffsetRect(text4TextRect, 0, 1) withAttributes: text4FontAttributes];
        [NSGraphicsContext restoreGraphicsState];
    }

    [NSGraphicsContext restoreGraphicsState];


    //// Text 5 Drawing
    NSRect text5Rect = NSMakeRect(146, 48, 159, 33);
    {
        NSString* textContent = @"Connect Kindle to Mac";
        NSMutableParagraphStyle* text5Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        text5Style.alignment = NSLeftTextAlignment;

        NSDictionary* text5FontAttributes = @{NSFontAttributeName: [NSFont boldSystemFontOfSize: 14], NSForegroundColorAttributeName: color21, NSParagraphStyleAttributeName: text5Style};

        CGFloat text5TextHeight = NSHeight([textContent boundingRectWithSize: text5Rect.size options: NSStringDrawingUsesLineFragmentOrigin attributes: text5FontAttributes]);
        NSRect text5TextRect = NSMakeRect(NSMinX(text5Rect), NSMinY(text5Rect) + (NSHeight(text5Rect) - text5TextHeight) / 2, NSWidth(text5Rect), text5TextHeight);
        [NSGraphicsContext saveGraphicsState];
        NSRectClip(text5Rect);
        [textContent drawInRect: NSOffsetRect(text5TextRect, 0, 1) withAttributes: text5FontAttributes];
        [NSGraphicsContext restoreGraphicsState];
    }
}

#pragma mark Generated Images

+ (NSImage*)imageOfDropView
{
    if (_imageOfDropView)
        return _imageOfDropView;

    _imageOfDropView = [NSImage.alloc initWithSize: NSMakeSize(460, 300)];
    [_imageOfDropView lockFocus];
    [MyStyleKitName drawDropView];

    [_imageOfDropView unlockFocus];

    return _imageOfDropView;
}

+ (NSImage*)imageOfDropViewOnKindleConnectedWithFrame: (NSRect)frame
{
    NSImage* imageOfDropViewOnKindleConnected = [NSImage.alloc initWithSize: frame.size];
    [imageOfDropViewOnKindleConnected lockFocus];
    [MyStyleKitName drawDropViewOnKindleConnectedWithFrame: frame];

    [imageOfDropViewOnKindleConnected unlockFocus];

    return imageOfDropViewOnKindleConnected;
}

+ (NSImage*)imageOfFavouriteIconSidebarWithFrame: (NSRect)frame isStarActive: (BOOL)isStarActive
{
    NSImage* imageOfFavouriteIconSidebar = [NSImage.alloc initWithSize: frame.size];
    [imageOfFavouriteIconSidebar lockFocus];
    [MyStyleKitName drawFavouriteIconSidebarWithFrame: frame isStarActive: isStarActive];

    [imageOfFavouriteIconSidebar unlockFocus];

    return imageOfFavouriteIconSidebar;
}

+ (NSImage*)imageOfFavouriteIconMainWithFrame: (NSRect)frame isStarActive: (BOOL)isStarActive
{
    NSImage* imageOfFavouriteIconMain = [NSImage.alloc initWithSize: frame.size];
    [imageOfFavouriteIconMain lockFocus];
    [MyStyleKitName drawFavouriteIconMainWithFrame: frame isStarActive: isStarActive];

    [imageOfFavouriteIconMain unlockFocus];

    return imageOfFavouriteIconMain;
}

+ (NSImage*)imageOfAuthorIcon
{
    if (_imageOfAuthorIcon)
        return _imageOfAuthorIcon;

    _imageOfAuthorIcon = [NSImage.alloc initWithSize: NSMakeSize(17, 17)];
    [_imageOfAuthorIcon lockFocus];
    [MyStyleKitName drawAuthorIcon];

    [_imageOfAuthorIcon unlockFocus];

    return _imageOfAuthorIcon;
}

+ (NSImage*)imageOfStarSideBarIcon
{
    if (_imageOfStarSideBarIcon)
        return _imageOfStarSideBarIcon;

    _imageOfStarSideBarIcon = [NSImage.alloc initWithSize: NSMakeSize(17, 17)];
    [_imageOfStarSideBarIcon lockFocus];
    [MyStyleKitName drawStarSideBarIcon];

    [_imageOfStarSideBarIcon unlockFocus];

    return _imageOfStarSideBarIcon;
}

+ (NSImage*)imageOfTrashSideBarIcon
{
    if (_imageOfTrashSideBarIcon)
        return _imageOfTrashSideBarIcon;

    _imageOfTrashSideBarIcon = [NSImage.alloc initWithSize: NSMakeSize(17, 17)];
    [_imageOfTrashSideBarIcon lockFocus];
    [MyStyleKitName drawTrashSideBarIcon];

    [_imageOfTrashSideBarIcon unlockFocus];

    return _imageOfTrashSideBarIcon;
}

+ (NSImage*)imageOfRecentelyAddedIcon
{
    if (_imageOfRecentelyAddedIcon)
        return _imageOfRecentelyAddedIcon;

    _imageOfRecentelyAddedIcon = [NSImage.alloc initWithSize: NSMakeSize(17, 17)];
    [_imageOfRecentelyAddedIcon lockFocus];
    [MyStyleKitName drawRecentelyAddedIcon];

    [_imageOfRecentelyAddedIcon unlockFocus];

    return _imageOfRecentelyAddedIcon;
}

@end
